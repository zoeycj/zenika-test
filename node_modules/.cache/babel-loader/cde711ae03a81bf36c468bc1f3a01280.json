{"ast":null,"code":"import axios from 'axios';\nimport axiosInstance from '../../api';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAIL, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAIL, LOG_OUT_SUCCESS, LOG_OUT_FAIL, LOG_OUT_REQUEST, USER_PERSONAL_INFO_REQUEST, USER_PERSONAL_INFO_SUCCESS, USER_PERSONAL_INFO_FAIL } from './types'; // # LOGOUT\n\nexport const logout = history => async dispatch => {\n  try {\n    dispatch({\n      type: LOG_OUT_REQUEST\n    });\n    const response = await axiosInstance().post(`/auth/logout`);\n    dispatch({\n      type: LOG_OUT_SUCCESS,\n      payload: response.data\n    });\n    localStorage.removeItem('userInfo');\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: LOG_OUT_FAIL,\n      payload: message\n    });\n  }\n}; // # LOGIN\n\nexport const login = payload => async dispatch => {\n  try {\n    dispatch({\n      type: LOG_IN_REQUEST\n    });\n    const response = await axiosInstance().post(`/auth/login`, payload);\n    dispatch({\n      type: LOG_IN_SUCCESS,\n      payload: response.data\n    });\n\n    if (response) {\n      localStorage.setItem('userInfo', JSON.stringify(response.data));\n    } // Set user data to localStorage\n\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: LOG_IN_FAIL,\n      payload: message\n    });\n  }\n}; // sign up\n\nexport const signUp = payload => async dispatch => {\n  try {\n    dispatch({\n      type: SIGN_UP_REQUEST\n    });\n    const response = await axiosInstance().post(`/user/create`, payload);\n    dispatch({\n      type: SIGN_UP_SUCCESS,\n      payload: response.data\n    });\n\n    if (response) {\n      localStorage.setItem('userInfo', JSON.stringify(response.data));\n    }\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: SIGN_UP_FAIL,\n      payload: message\n    });\n  }\n}; // Refresh Token\n\nexport const refreshToken = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOG_IN_REQUEST\n    });\n    const response = await axiosInstance().get(`/auth/refresh`);\n\n    if (response) {\n      localStorage.setItem('userInfo', JSON.stringify(response.data));\n    }\n\n    dispatch({\n      type: LOG_IN_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: LOG_IN_FAIL,\n      payload: message\n    });\n  }\n}; // # PERSONAL INFO\n\nexport const userPersonalInfo = history => async dispatch => {\n  try {\n    dispatch({\n      type: USER_PERSONAL_INFO_REQUEST\n    });\n    const response = await axiosInstance().get(`/user/profile`);\n    dispatch({\n      type: USER_PERSONAL_INFO_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_PERSONAL_INFO_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/demo-web-main/src/state/ducks/user/actions.js"],"names":["axios","axiosInstance","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAIL","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAIL","LOG_OUT_SUCCESS","LOG_OUT_FAIL","LOG_OUT_REQUEST","USER_PERSONAL_INFO_REQUEST","USER_PERSONAL_INFO_SUCCESS","USER_PERSONAL_INFO_FAIL","logout","history","dispatch","type","response","post","payload","data","localStorage","removeItem","error","message","login","setItem","JSON","stringify","signUp","refreshToken","get","userPersonalInfo"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport axiosInstance from '../../api'\n\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAIL,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAIL,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAIL,\n  LOG_OUT_REQUEST,\n  USER_PERSONAL_INFO_REQUEST,\n  USER_PERSONAL_INFO_SUCCESS,\n  USER_PERSONAL_INFO_FAIL,\n} from './types'\n\n// # LOGOUT\nexport const logout = (history) => async (dispatch) => {\n  try {\n    dispatch({ type: LOG_OUT_REQUEST })\n    const response = await axiosInstance().post(`/auth/logout`)\n\n    dispatch({\n      type: LOG_OUT_SUCCESS,\n      payload: response.data,\n    })\n\n    localStorage.removeItem('userInfo')\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n\n    dispatch({\n      type: LOG_OUT_FAIL,\n      payload: message,\n    })\n  }\n}\n\n// # LOGIN\nexport const login = (payload) => async (dispatch) => {\n  try {\n    dispatch({ type: LOG_IN_REQUEST })\n    const response = await axiosInstance().post(`/auth/login`, payload)\n\n    dispatch({\n      type: LOG_IN_SUCCESS,\n      payload: response.data,\n    })\n\n    if (response) {\n      localStorage.setItem('userInfo', JSON.stringify(response.data))\n    }\n\n    // Set user data to localStorage\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n\n    dispatch({\n      type: LOG_IN_FAIL,\n      payload: message,\n    })\n  }\n}\n// sign up\nexport const signUp = (payload) => async (dispatch) => {\n  try {\n    dispatch({ type: SIGN_UP_REQUEST })\n    const response = await axiosInstance().post(`/user/create`, payload)\n\n    dispatch({\n      type: SIGN_UP_SUCCESS,\n      payload: response.data,\n    })\n    if (response) {\n      localStorage.setItem('userInfo', JSON.stringify(response.data))\n    }\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    dispatch({\n      type: SIGN_UP_FAIL,\n      payload: message,\n    })\n  }\n}\n\n// Refresh Token\nexport const refreshToken = () => async (dispatch) => {\n  try {\n    dispatch({ type: LOG_IN_REQUEST })\n    const response = await axiosInstance().get(`/auth/refresh`)\n\n    if (response) {\n      localStorage.setItem('userInfo', JSON.stringify(response.data))\n    }\n\n    dispatch({\n      type: LOG_IN_SUCCESS,\n      payload: response.data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n\n    dispatch({\n      type: LOG_IN_FAIL,\n      payload: message,\n    })\n  }\n}\n\n// # PERSONAL INFO\nexport const userPersonalInfo = (history) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_PERSONAL_INFO_REQUEST })\n    const response = await axiosInstance().get(`/user/profile`)\n\n    dispatch({\n      type: USER_PERSONAL_INFO_SUCCESS,\n      payload: response.data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n\n    dispatch({\n      type: USER_PERSONAL_INFO_FAIL,\n      payload: message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}