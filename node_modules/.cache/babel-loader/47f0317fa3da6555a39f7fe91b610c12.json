{"ast":null,"code":"import * as types from './types';\nimport { message } from 'antd';\nexport const productListReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_LIST_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n\n    case types.PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload\n      };\n\n    case types.PRODUCT_LIST_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productDetailsReducer = (state = {\n  product: {\n    reviews: []\n  }\n}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_DETAILS_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case types.PRODUCT_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        product: action.payload\n      };\n\n    case types.PRODUCT_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_CREATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case types.PRODUCT_CREATE_SUCCESS:\n      message.success('Create new listing success!');\n      return {\n        loading: false,\n        data: action.payload\n      };\n\n    case types.PRODUCT_CREATE_FAIL:\n      message.error(action.payload);\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productUpdateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_UPDATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case types.PRODUCT_UPDATE_SUCCESS:\n      message.success('Update listing success!');\n      return {\n        loading: false,\n        data: action.payload\n      };\n\n    case types.PRODUCT_UPDATE_FAIL:\n      message.error(action.payload);\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productUploadImageReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.UPLOAD_IMAGE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case types.UPLOAD_IMAGE_SUCCESS:\n      message.success('Upload Image success!');\n      return {\n        loading: false,\n        data: action.payload\n      };\n\n    case types.UPLOAD_IMAGE_FAIL:\n      message.error(action.payload);\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/front-end-test/src/state/ducks/employee/reducers.js"],"names":["types","message","productListReducer","state","products","action","type","PRODUCT_LIST_REQUEST","loading","PRODUCT_LIST_SUCCESS","payload","PRODUCT_LIST_FAIL","error","productDetailsReducer","product","reviews","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","productCreateReducer","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","success","data","PRODUCT_CREATE_FAIL","productUpdateReducer","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAIL","productUploadImageReducer","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAIL"],"mappings":"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","sourcesContent":["import * as types from './types'\nimport { message } from 'antd'\nexport const productListReducer = (state = { products: [] }, action) => {\n  switch (action.type) {\n    case types.PRODUCT_LIST_REQUEST:\n      return { loading: true, products: [] }\n    case types.PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload,\n      }\n    case types.PRODUCT_LIST_FAIL:\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const productDetailsReducer = (\n  state = { product: { reviews: [] } },\n  action\n) => {\n  switch (action.type) {\n    case types.PRODUCT_DETAILS_REQUEST:\n      return { ...state, loading: true }\n    case types.PRODUCT_DETAILS_SUCCESS:\n      return { loading: false, product: action.payload }\n    case types.PRODUCT_DETAILS_FAIL:\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const productCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_CREATE_REQUEST:\n      return { loading: true }\n    case types.PRODUCT_CREATE_SUCCESS:\n      message.success('Create new listing success!')\n      return { loading: false, data: action.payload }\n    case types.PRODUCT_CREATE_FAIL:\n      message.error(action.payload)\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const productUpdateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_UPDATE_REQUEST:\n      return { loading: true }\n    case types.PRODUCT_UPDATE_SUCCESS:\n      message.success('Update listing success!')\n      return { loading: false, data: action.payload }\n    case types.PRODUCT_UPDATE_FAIL:\n      message.error(action.payload)\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\nexport const productUploadImageReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.UPLOAD_IMAGE_REQUEST:\n      return { loading: true }\n    case types.UPLOAD_IMAGE_SUCCESS:\n      message.success('Upload Image success!')\n      return { loading: false, data: action.payload }\n    case types.UPLOAD_IMAGE_FAIL:\n      message.error(action.payload)\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}