{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport * as reducers from './ducks';\n\nconst rootReducer = (state, action) => {\n  if (action.type === LOG_OUT_SUCCESS) state = undefined;\n  return combineReducers(reducers)(state, action);\n};\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst preloadedState = {\n  userOperations: {\n    userLogin: {\n      userInfo: userInfoFromStorage\n    }\n  }\n};\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/front-end-test/src/state/store.js"],"names":["combineReducers","configureStore","reducers","rootReducer","state","action","type","LOG_OUT_SUCCESS","undefined","userInfoFromStorage","localStorage","getItem","JSON","parse","preloadedState","userOperations","userLogin","userInfo","store","reducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAO,KAAKC,QAAZ,MAA0B,SAA1B;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgBC,eAApB,EAAqCH,KAAK,GAAGI,SAAR;AACrC,SAAOR,eAAe,CAACE,QAAD,CAAf,CAA0BE,KAA1B,EAAiCC,MAAjC,CAAP;AACD,CAHD;;AAKA,MAAMI,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GAExB,IAFJ;AAIA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,QAAQ,EAAER;AAAZ;AADG;AADK,CAAvB;AAMA,MAAMS,KAAK,GAAGjB,cAAc,CAAC;AAC3BkB,EAAAA,OAAO,EAAEhB,WADkB;AAE3BW,EAAAA;AAF2B,CAAD,CAA5B;AAKA,eAAeI,KAAf","sourcesContent":["import { combineReducers } from 'redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport * as reducers from './ducks'\n\nconst rootReducer = (state, action) => {\n  if (action.type === LOG_OUT_SUCCESS) state = undefined\n  return combineReducers(reducers)(state, action)\n}\n\nconst userInfoFromStorage = localStorage.getItem('userInfo')\n  ? JSON.parse(localStorage.getItem('userInfo'))\n  : null\n\nconst preloadedState = {\n  userOperations: {\n    userLogin: { userInfo: userInfoFromStorage },\n  },\n}\n\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState,\n})\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}