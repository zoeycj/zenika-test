{"ast":null,"code":"/* eslint-disable no-debugger */\nimport * as types from './types';\nimport { message } from 'antd';\nexport const productListReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_LIST_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n\n    case types.PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload\n      };\n\n    case types.PRODUCT_LIST_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productDetailsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_DETAILS_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case types.PRODUCT_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        data: action.payload\n      };\n\n    case types.PRODUCT_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_CREATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case types.PRODUCT_CREATE_SUCCESS:\n      message.success('Create new listing success!');\n      return {\n        loading: false,\n        data: action.payload\n      };\n\n    case types.PRODUCT_CREATE_FAIL:\n      message.error(action.payload);\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productUpdateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_UPDATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case types.PRODUCT_UPDATE_SUCCESS:\n      message.success('Update listing success!');\n      return {\n        loading: false,\n        data: action.payload\n      };\n\n    case types.PRODUCT_UPDATE_FAIL:\n      message.error(action.payload);\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const productUploadImageReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.UPLOAD_IMAGE_REQUEST:\n      return {\n        loading: true\n      };\n\n    case types.UPLOAD_IMAGE_SUCCESS:\n      message.success('Upload Image success!');\n      return {\n        loading: false,\n        data: action.payload\n      };\n\n    case types.UPLOAD_IMAGE_FAIL:\n      message.error(action.payload);\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/front-end-test/src/state/ducks/products/reducers.js"],"names":["types","message","productListReducer","state","products","action","type","PRODUCT_LIST_REQUEST","loading","PRODUCT_LIST_SUCCESS","payload","PRODUCT_LIST_FAIL","error","productDetailsReducer","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","data","PRODUCT_DETAILS_FAIL","productCreateReducer","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","success","PRODUCT_CREATE_FAIL","productUpdateReducer","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAIL","productUploadImageReducer","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAIL"],"mappings":"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","sourcesContent":["/* eslint-disable no-debugger */\nimport * as types from './types'\nimport { message } from 'antd'\n\nexport const productListReducer = (state = { products: [] }, action) => {\n  switch (action.type) {\n    case types.PRODUCT_LIST_REQUEST:\n      return { loading: true, products: [] }\n    case types.PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload,\n      }\n    case types.PRODUCT_LIST_FAIL:\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const productDetailsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_DETAILS_REQUEST:\n      return { ...state, loading: true }\n    case types.PRODUCT_DETAILS_SUCCESS:\n      return { loading: false, data: action.payload }\n    case types.PRODUCT_DETAILS_FAIL:\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const productCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_CREATE_REQUEST:\n      return { loading: true }\n    case types.PRODUCT_CREATE_SUCCESS:\n      message.success('Create new listing success!')\n      return { loading: false, data: action.payload }\n    case types.PRODUCT_CREATE_FAIL:\n      message.error(action.payload)\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const productUpdateReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.PRODUCT_UPDATE_REQUEST:\n      return { loading: true }\n    case types.PRODUCT_UPDATE_SUCCESS:\n      message.success('Update listing success!')\n      return { loading: false, data: action.payload }\n    case types.PRODUCT_UPDATE_FAIL:\n      message.error(action.payload)\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\nexport const productUploadImageReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.UPLOAD_IMAGE_REQUEST:\n      return { loading: true }\n    case types.UPLOAD_IMAGE_SUCCESS:\n      message.success('Upload Image success!')\n      return { loading: false, data: action.payload }\n    case types.UPLOAD_IMAGE_FAIL:\n      message.error(action.payload)\n      return { loading: false, error: action.payload }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}