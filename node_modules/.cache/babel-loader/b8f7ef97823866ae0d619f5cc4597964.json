{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport { refreshToken } from '../ducks/user/actions';\nexport default ((history = null) => {\n  const baseURL = process.env.REACT_APP_BACKEND_URL;\n  const headers = {\n    'Content-Type': 'application/json;charset=utf-8'\n  };\n  const axiosInstance = axios.create({\n    withCredentials: true,\n    headers\n  });\n  axiosInstance.interceptors.response.use(async response => new Promise((resolve, reject) => {\n    resolve(response);\n  }), async error => {\n    if (!error.response) {\n      return new Promise((resolve, reject) => {\n        reject(error);\n      });\n    }\n\n    const originalRequest = error.config;\n\n    if (error.response.data.message === 'User has not logged in') {\n      // console.log('error.response.message', error.response.message)\n      // console.log('originalRequest.url', originalRequest.url)\n      // console.log('goLogin')\n      if (history) {\n        history.push('/');\n      } else {\n        window.location = '/';\n      }\n    } else {\n      return new Promise((resolve, reject) => {\n        reject(error);\n      });\n    }\n\n    if (originalRequest.url !== '/auth/refresh/' && error.response.status === 401 && !originalRequest._retry) {\n      // console.log('originalRequest.url', originalRequest.url)\n      // console.log('are you refreshing')\n      originalRequest._retry = true;\n      localStorage.removeItem('userInfo');\n      await store.dispatch(refreshToken()); // console.log(\n      //   'originalRequest._retry after failed',\n      //   originalRequest._retry\n      // )\n\n      return axiosInstance(originalRequest);\n    }\n\n    return new Promise((resolve, reject) => {\n      reject(error);\n    });\n  });\n  return axiosInstance;\n});","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/demo-web-main/src/state/api/index.js"],"names":["axios","store","refreshToken","history","baseURL","process","env","REACT_APP_BACKEND_URL","headers","axiosInstance","create","withCredentials","interceptors","response","use","Promise","resolve","reject","error","originalRequest","config","data","message","push","window","location","url","status","_retry","localStorage","removeItem","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,gBAAe,CAACC,OAAO,GAAG,IAAX,KAAoB;AACjC,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA5B;AAEA,QAAMC,OAAO,GAAG;AACd,oBAAgB;AADF,GAAhB;AAIA,QAAMC,aAAa,GAAGT,KAAK,CAACU,MAAN,CAAa;AACjCC,IAAAA,eAAe,EAAE,IADgB;AAEjCH,IAAAA;AAFiC,GAAb,CAAtB;AAKAC,EAAAA,aAAa,CAACG,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACE,MAAOD,QAAP,IACE,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BD,IAAAA,OAAO,CAACH,QAAD,CAAP;AACD,GAFD,CAFJ,EAKE,MAAOK,KAAP,IAAiB;AACf,QAAI,CAACA,KAAK,CAACL,QAAX,EAAqB;AACnB,aAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCA,QAAAA,MAAM,CAACC,KAAD,CAAN;AACD,OAFM,CAAP;AAGD;;AAED,UAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;;AACA,QAAIF,KAAK,CAACL,QAAN,CAAeQ,IAAf,CAAoBC,OAApB,KAAgC,wBAApC,EAA8D;AAC5D;AACA;AACA;AAEA,UAAInB,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACoB,IAAR,CAAa,GAAb;AACD,OAFD,MAEO;AACLC,QAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB;AACD;AACF,KAVD,MAUO;AACL,aAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCA,QAAAA,MAAM,CAACC,KAAD,CAAN;AACD,OAFM,CAAP;AAGD;;AAED,QACEC,eAAe,CAACO,GAAhB,KAAwB,gBAAxB,IACAR,KAAK,CAACL,QAAN,CAAec,MAAf,KAA0B,GAD1B,IAEA,CAACR,eAAe,CAACS,MAHnB,EAIE;AACA;AACA;AACAT,MAAAA,eAAe,CAACS,MAAhB,GAAyB,IAAzB;AACAC,MAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,YAAM7B,KAAK,CAAC8B,QAAN,CAAe7B,YAAY,EAA3B,CAAN,CALA,CAOA;AACA;AACA;AACA;;AAEA,aAAOO,aAAa,CAACU,eAAD,CAApB;AACD;;AAED,WAAO,IAAIJ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCA,MAAAA,MAAM,CAACC,KAAD,CAAN;AACD,KAFM,CAAP;AAGD,GAnDH;AAsDA,SAAOT,aAAP;AACD,CAnED","sourcesContent":["import axios from 'axios'\nimport store from '../store'\nimport { refreshToken } from '../ducks/user/actions'\n\nexport default (history = null) => {\n  const baseURL = process.env.REACT_APP_BACKEND_URL\n\n  const headers = {\n    'Content-Type': 'application/json;charset=utf-8',\n  }\n\n  const axiosInstance = axios.create({\n    withCredentials: true,\n    headers,\n  })\n\n  axiosInstance.interceptors.response.use(\n    async (response) =>\n      new Promise((resolve, reject) => {\n        resolve(response)\n      }),\n    async (error) => {\n      if (!error.response) {\n        return new Promise((resolve, reject) => {\n          reject(error)\n        })\n      }\n\n      const originalRequest = error.config\n      if (error.response.data.message === 'User has not logged in') {\n        // console.log('error.response.message', error.response.message)\n        // console.log('originalRequest.url', originalRequest.url)\n        // console.log('goLogin')\n\n        if (history) {\n          history.push('/')\n        } else {\n          window.location = '/'\n        }\n      } else {\n        return new Promise((resolve, reject) => {\n          reject(error)\n        })\n      }\n\n      if (\n        originalRequest.url !== '/auth/refresh/' &&\n        error.response.status === 401 &&\n        !originalRequest._retry\n      ) {\n        // console.log('originalRequest.url', originalRequest.url)\n        // console.log('are you refreshing')\n        originalRequest._retry = true\n        localStorage.removeItem('userInfo')\n        await store.dispatch(refreshToken())\n\n        // console.log(\n        //   'originalRequest._retry after failed',\n        //   originalRequest._retry\n        // )\n\n        return axiosInstance(originalRequest)\n      }\n\n      return new Promise((resolve, reject) => {\n        reject(error)\n      })\n    }\n  )\n\n  return axiosInstance\n}\n"]},"metadata":{},"sourceType":"module"}