{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport * as reducers from './ducks';\nimport { LOG_OUT_SUCCESS } from './ducks/user/types';\n\nconst rootReducer = (state, action) => {\n  if (action.type === LOG_OUT_SUCCESS) state = undefined;\n  return combineReducers(reducers)(state, action);\n}; // Retrieve user data from localstorage\n\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst preloadedState = {\n  userOperations: {\n    userLogin: {\n      userInfo: userInfoFromStorage\n    }\n  }\n};\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/demo-web-main/src/state/store.js"],"names":["combineReducers","configureStore","reducers","LOG_OUT_SUCCESS","rootReducer","state","action","type","undefined","userInfoFromStorage","localStorage","getItem","JSON","parse","preloadedState","userOperations","userLogin","userInfo","store","reducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAO,KAAKC,QAAZ,MAA0B,SAA1B;AACA,SAASC,eAAT,QAAgC,oBAAhC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgBJ,eAApB,EAAqCE,KAAK,GAAGG,SAAR;AACrC,SAAOR,eAAe,CAACE,QAAD,CAAf,CAA0BG,KAA1B,EAAiCC,MAAjC,CAAP;AACD,CAHD,C,CAKA;;;AACA,MAAMG,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GAExB,IAFJ;AAIA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,QAAQ,EAAER;AAAZ;AADG;AADK,CAAvB;AAMA,MAAMS,KAAK,GAAGjB,cAAc,CAAC;AAC3BkB,EAAAA,OAAO,EAAEf,WADkB;AAE3BU,EAAAA;AAF2B,CAAD,CAA5B;AAKA,eAAeI,KAAf","sourcesContent":["import { combineReducers } from 'redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport * as reducers from './ducks'\nimport { LOG_OUT_SUCCESS } from './ducks/user/types'\n\nconst rootReducer = (state, action) => {\n  if (action.type === LOG_OUT_SUCCESS) state = undefined\n  return combineReducers(reducers)(state, action)\n}\n\n// Retrieve user data from localstorage\nconst userInfoFromStorage = localStorage.getItem('userInfo')\n  ? JSON.parse(localStorage.getItem('userInfo'))\n  : null\n\nconst preloadedState = {\n  userOperations: {\n    userLogin: { userInfo: userInfoFromStorage },\n  },\n}\n\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState,\n})\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}