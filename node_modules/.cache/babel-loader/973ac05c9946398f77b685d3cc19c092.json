{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Desktop\\\\workspace\\\\Zenika\\\\front-end-test\\\\src\\\\views\\\\pages\\\\home\\\\index.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Frontend Technical Test\\xA0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Using\\xA0React JS\\xA0as the JavaScript framework\\xA0(with\\xA0react-router\\xA0for views management and\\xA0Redux\\xA0for\\xA0stage-management\\xA0and\\xA0Redux form) and\\xA0Material-UI\\xA0or\\xA0Antd\\xA0as the\\xA0CSS\\xA0framework, create an \\u201CEmployee\\u201D manager.\\xA0 The Employee Manager will have a homepage and an add/edit page.\\xA0 \\xA0 The home page view should contain only one view called summary page. The home page\\xA0url\\xA0will be (http://localhost:3000/employee/list) and will only display the summary, a list of employees with following mentioned attributes in a Grid\\xA0(you can use any Table or custom grid like Slick Grid or AG-Grid)\\xA0 a.First name\\xA0 b.Last name\\xA0\\xA0 c.Email address\\xA0 d.Phone number\\xA0 e.Gender\\xA0\\xA0 f.Edit/Delete\\xA0button on each row at the end of the row.\\xA0 In the same page, Above Table, in the top right corner, should have an option to \\u201CAdd\\u201D Employee. By clicking on \\u201CAdd\\u201D Employee has to take you to next page with the\\xA0url\\xA0(http://localhost/employee/add)\\xA0with following mentioned inputs:\\xA0 a.First name\\xA0(Reusable Textbox)\\xA0Minimum 6 character and max 10 characters validation.\\xA0 b.Last name\\xA0(Reusable\\xA0Textbox)\\xA0Minimum 6 character and max 10 characters validation.\\xA0 c.Email\\xA0address\\xA0(Reusable\\xA0Textbox)\\xA0email validation.\\xA0 d.Phone number:\\xA0SG phone number validation.\\xA0 e.Gender\\xA0(Radio Button Group)\\xA0 f.\\u201CSubmit\\u201D button at the bottom right corner.\\xA0 By clicking on Submit button, Form has to be validated and should be highlighted with red border color with validation message at the down of each incorrect input fields in the form.\\xA0 By clicking on Edit Button on the row, Application has to take to next page with the\\xA0url\\xA0(http://localhost/employee/edit.......) with router params and display clicked employee information in edit form same as \\u201CAdd\\u201D Employee form. The same validation rule should applied here as well.\\xA0 Bonus:\\xA0If User made some changes and moving away from this page, need a warning stating that \\u201CForm has been modified. You will\\xA0lose\\xA0your unsaved changes. Are you sure you want to close this form?\\u201D By clicking on \\u201COK\\u201D, take the user to the destination page where he/she was intending to go. Otherwise stay in the same page.\\xA0 Delete: By clicking on Delete button, Confirmation popup should appear.\\xA0Summary page should be refreshed.\\xA0 For CRUD operation, either you can use\\xA0localStorage\\xA0or any free MOCK API whichever is available in the market. Bonus:\\xA0Make use of redux saga library to handle side effects What we are looking for\\xA0 1.Applicant\\u2019s ability to code, code readability, folder structure\\xA0and reusability of the components.\\xA0 2.CSS coding style. Try to reduce and use your own custom style even when using the css framework 3.Ability to use different react libraries such as Redux, Router, Redux Form\\xA0 4.Redux State management 5.Applicants are encouraged to use best practices You may upload the technical test to\\xA0Github\\xA0and provide us the link, or you may zip it up and send it over via email All the best!\\xA0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/front-end-test/src/views/pages/home/index.js"],"names":["React","Home"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AA+CD,CAhDD;;AAiDA,eAAeA,IAAf","sourcesContent":["import React from 'react'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <>\r\n      <h2>Frontend Technical Test </h2>\r\n      <p>\r\n        Using React JS as the JavaScript framework (with react-router for views\r\n        management and Redux for stage-management and Redux form)\r\n        and Material-UI or Antd as the CSS framework, create an “Employee”\r\n        manager. \r\n        The Employee Manager will have a homepage and an add/edit page. \r\n \r\nThe home page view should contain only one view called summary page. The home page url will be (http://localhost:3000/employee/list) and will only display the summary, a list of employees with following mentioned attributes in a Grid (you can use any Table or custom grid like Slick Grid or AG-Grid) \r\na.First name \r\nb.Last name  \r\nc.Email address \r\nd.Phone number \r\ne.Gender  \r\nf.Edit/Delete button on each row at the end of the row. \r\n\r\nIn the same page, Above Table, in the top right corner, should have an option to “Add” Employee. By clicking on “Add” Employee has to take you to next page with the url (http://localhost/employee/add) with following mentioned inputs: \r\na.First name (Reusable Textbox) Minimum 6 character and max 10 characters validation. \r\nb.Last name (Reusable Textbox) Minimum 6 character and max 10 characters validation. \r\nc.Email address (Reusable Textbox) email validation. \r\nd.Phone number: SG phone number validation. \r\ne.Gender (Radio Button Group) \r\nf.“Submit” button at the bottom right corner. \r\n\r\nBy clicking on Submit button, Form has to be validated and should be highlighted with red border color with validation message at the down of each incorrect input fields in the form. \r\nBy clicking on Edit Button on the row, Application has to take to next page with the url (http://localhost/employee/edit.......) with router params and display clicked employee information in edit form same as “Add” Employee form. The same validation rule should applied here as well. \r\nBonus: If User made some changes and moving away from this page, need a warning stating that “Form has been modified. You will lose your unsaved changes. Are you sure you want to close this form?” By clicking on “OK”, take the user to the destination page where he/she was intending to go. Otherwise stay in the same page. \r\nDelete: By clicking on Delete button, Confirmation popup should appear. Summary page should be refreshed. \r\n\r\nFor CRUD operation, either you can use localStorage or any free MOCK API whichever is available in the market.\r\nBonus: Make use of redux saga library to handle side effects\r\n\r\n\r\nWhat we are looking for \r\n1.Applicant’s ability to code, code readability, folder structure and reusability of the components. \r\n2.CSS coding style. Try to reduce and use your own custom style even when using the css framework\r\n3.Ability to use different react libraries such as Redux, Router, Redux Form \r\n4.Redux State management\r\n5.Applicants are encouraged to use best practices\r\n\r\nYou may upload the technical test to Github and provide us the link, or you may zip it up and send it over via email\r\nAll the best! \r\n      </p>\r\n    </>\r\n  )\r\n}\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}