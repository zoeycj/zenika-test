{"ast":null,"code":"/* eslint-disable no-debugger */\nimport axiosInstance from '../../api';\nimport axios from 'axios';\nimport * as types from './types'; // get all\n\nexport const getEmployeeList = () => async dispatch => {\n  try {\n    dispatch({\n      type: types.GET_ALL_EMPLOYEE_REQUEST\n    });\n    const response = await axios.get(`/employee/list`);\n    dispatch({\n      type: types.GET_ALL_EMPLOYEE_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_ALL_EMPLOYEE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // get one\n// export const getSingleEmployee = (id) => async (dispatch) => {\n//   try {\n//     dispatch({ type: types.GET_SINGLE_EMPLOYEE_REQUEST })\n//     const { data } = await axios.get(`/employee/detail/${id}`)\n//     dispatch({\n//       type: types.GET_SINGLE_EMPLOYEE_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     dispatch({\n//       type: types.GET_SINGLE_EMPLOYEE_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     })\n//   }\n// }\n// add new\n\nexport const addEmployee = payload => async dispatch => {\n  try {\n    dispatch({\n      type: types.EMPLOYEE_ADD_REQUEST\n    });\n    const response = await axios.post(`/employee/add`, payload);\n    dispatch({\n      type: types.EMPLOYEE_ADD_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.EMPLOYEE_ADD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const editEmployee = payload => async dispatch => {\n  try {\n    dispatch({\n      type: types.EMPLOYEE_EDIT_REQUEST\n    });\n    const response = await axios.post(`/employee/edit`, payload);\n    dispatch({\n      type: types.EMPLOYEE_EDIT_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.EMPLOYEE_EDIT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteEmployee = id => async dispatch => {\n  try {\n    dispatch({\n      type: types.EMPLOYEE_DELETE_REQUEST\n    });\n    debugger;\n    const response = await axios.post(`/employee/delete`, {\n      id\n    });\n    debugger; // if(response.status)\n\n    dispatch({\n      type: types.EMPLOYEE_DELETE_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.EMPLOYEE_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/kevin/Desktop/workspace/Zenika/front-end-test/src/state/ducks/employee/actions.js"],"names":["axiosInstance","axios","types","getEmployeeList","dispatch","type","GET_ALL_EMPLOYEE_REQUEST","response","get","GET_ALL_EMPLOYEE_SUCCESS","payload","data","error","GET_ALL_EMPLOYEE_FAIL","message","addEmployee","EMPLOYEE_ADD_REQUEST","post","EMPLOYEE_ADD_SUCCESS","EMPLOYEE_ADD_FAIL","editEmployee","EMPLOYEE_EDIT_REQUEST","EMPLOYEE_EDIT_SUCCESS","EMPLOYEE_EDIT_FAIL","deleteEmployee","id","EMPLOYEE_DELETE_REQUEST","EMPLOYEE_DELETE_SUCCESS","EMPLOYEE_DELETE_FAIL"],"mappings":"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","sourcesContent":["/* eslint-disable no-debugger */\nimport axiosInstance from '../../api'\nimport axios from 'axios'\n\nimport * as types from './types'\n// get all\nexport const getEmployeeList = () => async (dispatch) => {\n  try {\n    dispatch({ type: types.GET_ALL_EMPLOYEE_REQUEST })\n    const response = await axios.get(`/employee/list`)\n    dispatch({\n      type: types.GET_ALL_EMPLOYEE_SUCCESS,\n      payload: response.data,\n    })\n  } catch (error) {\n    dispatch({\n      type: types.GET_ALL_EMPLOYEE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n// get one\n// export const getSingleEmployee = (id) => async (dispatch) => {\n//   try {\n//     dispatch({ type: types.GET_SINGLE_EMPLOYEE_REQUEST })\n\n//     const { data } = await axios.get(`/employee/detail/${id}`)\n\n//     dispatch({\n//       type: types.GET_SINGLE_EMPLOYEE_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     dispatch({\n//       type: types.GET_SINGLE_EMPLOYEE_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     })\n//   }\n// }\n\n// add new\nexport const addEmployee = (payload) => async (dispatch) => {\n  try {\n    dispatch({ type: types.EMPLOYEE_ADD_REQUEST })\n\n    const response = await axios.post(`/employee/add`, payload)\n\n    dispatch({\n      type: types.EMPLOYEE_ADD_SUCCESS,\n      payload: response.data,\n    })\n  } catch (error) {\n    dispatch({\n      type: types.EMPLOYEE_ADD_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const editEmployee = (payload) => async (dispatch) => {\n  try {\n    dispatch({ type: types.EMPLOYEE_EDIT_REQUEST })\n    const response = await axios.post(`/employee/edit`, payload)\n    dispatch({\n      type: types.EMPLOYEE_EDIT_SUCCESS,\n      payload: response.data,\n    })\n  } catch (error) {\n    dispatch({\n      type: types.EMPLOYEE_EDIT_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\nexport const deleteEmployee = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: types.EMPLOYEE_DELETE_REQUEST })\n    debugger\n    const response = await axios.post(`/employee/delete`, { id })\n    debugger\n    // if(response.status)\n    dispatch({\n      type: types.EMPLOYEE_DELETE_SUCCESS,\n      payload: response.data,\n    })\n  } catch (error) {\n    dispatch({\n      type: types.EMPLOYEE_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}